// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using chickko.api.Data;

#nullable disable

namespace chickko.api.Migrations
{
    [DbContext(typeof(ChickkoContext))]
    [Migration("20250723075726_AddDescriptionStocklogtype")]
    partial class AddDescriptionStocklogtype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("chickko.api.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryInFirestore")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("chickko.api.Models.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CostId"));

                    b.Property<int>("CostCategoryID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CostDate")
                        .HasColumnType("date");

                    b.Property<string>("CostDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CostPrice")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("CostTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateOnly>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("UpdateTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("isFinish")
                        .HasColumnType("boolean");

                    b.HasKey("CostId");

                    b.HasIndex("CostCategoryID");

                    b.ToTable("Cost");
                });

            modelBuilder.Entity("chickko.api.Models.CostCategory", b =>
                {
                    b.Property<int>("CostCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CostCategoryID"));

                    b.Property<string>("CostCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CostCategoryID");

                    b.ToTable("CostCategory");
                });

            modelBuilder.Entity("chickko.api.Models.DischargeType", b =>
                {
                    b.Property<int>("DischargeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DischargeTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DischargeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DischargeTypeId");

                    b.ToTable("DischargeTypes");
                });

            modelBuilder.Entity("chickko.api.Models.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("chickko.api.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("chickko.api.Models.ImportOrderExcel", b =>
                {
                    b.Property<string>("cash_price")
                        .HasColumnType("text");

                    b.Property<string>("cost")
                        .HasColumnType("text");

                    b.Property<string>("customer_name")
                        .HasColumnType("text");

                    b.Property<string>("discharge_time")
                        .HasColumnType("text");

                    b.Property<string>("discharge_type")
                        .HasColumnType("text");

                    b.Property<string>("finish_order_time")
                        .HasColumnType("text");

                    b.Property<string>("menu_name")
                        .HasColumnType("text");

                    b.Property<string>("order_date")
                        .HasColumnType("text");

                    b.Property<string>("order_time")
                        .HasColumnType("text");

                    b.Property<string>("price")
                        .HasColumnType("text");

                    b.Property<string>("profit")
                        .HasColumnType("text");

                    b.Property<string>("promptpay_price")
                        .HasColumnType("text");

                    b.Property<string>("qty")
                        .HasColumnType("text");

                    b.Property<string>("unit_cost")
                        .HasColumnType("text");

                    b.Property<string>("unit_price")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("chickko.api.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTopping")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuIdInFirestore")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("chickko.api.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<bool>("IsDischarge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<string>("MenuIdInFirestore")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("ToppingQTY")
                        .HasColumnType("integer");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("chickko.api.Models.OrderDetailTopping", b =>
                {
                    b.Property<int>("OrderDetailToppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailToppingId"));

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ToppingPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderDetailToppingId");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("OrderDetailToppings");
                });

            modelBuilder.Entity("chickko.api.Models.OrderHeader", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<TimeOnly?>("DischargeTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("DischargeTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("FinishOrderTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("IdInFirestore")
                        .HasColumnType("text");

                    b.Property<bool>("IsDischarge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinishOrder")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemQTY")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderRemark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("OrderTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TableID")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderId");

                    b.HasIndex("DischargeTypeId");

                    b.HasIndex("DiscountID");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("TableID");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("chickko.api.Models.Ordertype", b =>
                {
                    b.Property<int>("OrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("OrderTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderTypeId");

                    b.ToTable("Ordertypes");
                });

            modelBuilder.Entity("chickko.api.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RecentStockLogId")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequiredQTY")
                        .HasColumnType("integer");

                    b.Property<int>("StockCategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("StockInQTY")
                        .HasColumnType("integer");

                    b.Property<int>("StockLocationID")
                        .HasColumnType("integer");

                    b.Property<int>("StockUnitTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("TotalQTY")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("UpdateTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("StockId");

                    b.HasIndex("RecentStockLogId");

                    b.HasIndex("StockCategoryID");

                    b.HasIndex("StockLocationID");

                    b.HasIndex("StockUnitTypeID");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("chickko.api.Models.StockCategory", b =>
                {
                    b.Property<int>("StockCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockCategoryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StockCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StockCategoryID");

                    b.ToTable("StockCategory");
                });

            modelBuilder.Entity("chickko.api.Models.StockLocation", b =>
                {
                    b.Property<int>("StockLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockLocationID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StockLocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StockLocationID");

                    b.ToTable("StockLocation");
                });

            modelBuilder.Entity("chickko.api.Models.StockLog", b =>
                {
                    b.Property<int>("StockLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockLogId"));

                    b.Property<int>("DipQTY")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPurchese")
                        .HasColumnType("boolean");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("PurcheseQTY")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequiredQTY")
                        .HasColumnType("integer");

                    b.Property<int>("StockCategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StockInDate")
                        .HasColumnType("date");

                    b.Property<int>("StockInQTY")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StockInTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("StockLocationID")
                        .HasColumnType("integer");

                    b.Property<int>("StockLogTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("StockUnitTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierSupplyId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalQTY")
                        .HasColumnType("integer");

                    b.HasKey("StockLogId");

                    b.HasIndex("StockCategoryID");

                    b.HasIndex("StockLocationID");

                    b.HasIndex("StockLogTypeID");

                    b.HasIndex("StockUnitTypeID");

                    b.HasIndex("SupplierSupplyId");

                    b.ToTable("StockLog");
                });

            modelBuilder.Entity("chickko.api.Models.StockLogType", b =>
                {
                    b.Property<int>("StockLogTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockLogTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StockLogTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StockLogTypeID");

                    b.ToTable("StockLogType");
                });

            modelBuilder.Entity("chickko.api.Models.StockUnitType", b =>
                {
                    b.Property<int>("StockUnitTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockUnitTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StockUnitTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StockUnitTypeID");

                    b.ToTable("StockUnitType");
                });

            modelBuilder.Entity("chickko.api.Models.Supplier", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplyContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SupplyId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("chickko.api.Models.Table", b =>
                {
                    b.Property<int>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TableID");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("chickko.api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartWorkDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("chickko.api.Models.WorkTime", b =>
                {
                    b.Property<int>("WorkTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkTimeID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ClockInLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPurchese")
                        .HasColumnType("boolean");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeClockIn")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeClockOut")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TotalWorkTime")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.Property<int>("bonus")
                        .HasColumnType("integer");

                    b.Property<int>("wage")
                        .HasColumnType("integer");

                    b.HasKey("WorkTimeID");

                    b.ToTable("WorkTime");
                });

            modelBuilder.Entity("chickko.api.Models.Cost", b =>
                {
                    b.HasOne("chickko.api.Models.CostCategory", "CostCategory")
                        .WithMany()
                        .HasForeignKey("CostCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCategory");
                });

            modelBuilder.Entity("chickko.api.Models.Menu", b =>
                {
                    b.HasOne("chickko.api.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("chickko.api.Models.OrderDetail", b =>
                {
                    b.HasOne("chickko.api.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("chickko.api.Models.OrderDetailTopping", b =>
                {
                    b.HasOne("chickko.api.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.OrderDetail", "OrderDetail")
                        .WithMany("Toppings")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("chickko.api.Models.OrderHeader", b =>
                {
                    b.HasOne("chickko.api.Models.DischargeType", "DischargeType")
                        .WithMany()
                        .HasForeignKey("DischargeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("chickko.api.Models.Ordertype", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DischargeType");

                    b.Navigation("Discount");

                    b.Navigation("OrderType");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("chickko.api.Models.Stock", b =>
                {
                    b.HasOne("chickko.api.Models.StockLog", "RecentStockLog")
                        .WithMany()
                        .HasForeignKey("RecentStockLogId");

                    b.HasOne("chickko.api.Models.StockCategory", "StockCategory")
                        .WithMany()
                        .HasForeignKey("StockCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.StockLocation", "StockLocation")
                        .WithMany()
                        .HasForeignKey("StockLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.StockUnitType", "StockUnitType")
                        .WithMany()
                        .HasForeignKey("StockUnitTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecentStockLog");

                    b.Navigation("StockCategory");

                    b.Navigation("StockLocation");

                    b.Navigation("StockUnitType");
                });

            modelBuilder.Entity("chickko.api.Models.StockLog", b =>
                {
                    b.HasOne("chickko.api.Models.StockCategory", "StockCategory")
                        .WithMany()
                        .HasForeignKey("StockCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.StockLocation", "StockLocation")
                        .WithMany()
                        .HasForeignKey("StockLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.StockLogType", "StockLogType")
                        .WithMany()
                        .HasForeignKey("StockLogTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.StockUnitType", "StockUnitType")
                        .WithMany()
                        .HasForeignKey("StockUnitTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickko.api.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierSupplyId");

                    b.Navigation("StockCategory");

                    b.Navigation("StockLocation");

                    b.Navigation("StockLogType");

                    b.Navigation("StockUnitType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("chickko.api.Models.OrderDetail", b =>
                {
                    b.Navigation("Toppings");
                });
#pragma warning restore 612, 618
        }
    }
}
